name: Build and Deploy MEAN Stack

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKERHUB_USERNAME: akhil3797

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get short SHA
      id: vars
      run: echo "sha7=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          akhil3797/mean-backend:latest
          akhil3797/mean-backend:${{ steps.vars.outputs.sha7 }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          akhil3797/mean-frontend:latest
          akhil3797/mean-frontend:${{ steps.vars.outputs.sha7 }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 3.110.119.217
        username: ubuntu
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          # Create project directory if it doesn't exist
          if [ ! -d "mean-stack-deployment" ]; then
            git clone https://github.com/akhilnbreddy-cloud/mean-stack-docker-deployment.git mean-stack-deployment
          fi
          
          cd mean-stack-deployment
          
          # Pull latest code
          git pull origin main
          
          # Pull latest Docker images
          docker compose pull
          
          # Stop existing containers
          docker compose down
          
          # Start new containers
          docker compose up -d
          
          # Clean up unused images
          docker image prune -f
          
          # Show running containers
          docker compose ps
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application available at: http://$(curl -s ifconfig.me)"